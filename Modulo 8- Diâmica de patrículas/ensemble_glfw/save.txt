#include<stdlib.h>
#include<math.h>
#include<stdio.h>
#include<time.h>
#include <GLFW/glfw3.h>

//acusar eventuais impedimentos da janela ser aberta
static void error_callback(int error, const char* description)
{
      fprintf(stderr, "Error: %s\n", description);
}
//listar respostas do programa a comandos no teclado
static void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods)
{
	if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
		glfwSetWindowShouldClose (window, GLFW_TRUE);
}


int main (void){
//definir ponteiro janela
GLFWwindow* window;

int n=125, i, j, k, cont=0;
double dt= 0.00001, fx[n], fy[n], fz[n], fx1[n], fy1[n], fz1[n], x[n], y[n], z[n], x1[n], y1[n], z1[n];
double R[n], R1[n], r6, r12, vx[n], vy[n], vz[n], u, v, a=2;
srand((unsigned)time(NULL));

if (!glfwInit())
        return -1;
window = glfwCreateWindow(1000,1000,"Dinâmica Molecular", NULL,NULL);
if (!window)
    {
        glfwTerminate();
        return -1;
    }
glfwMakeContextCurrent(window);
glfwSetKeyCallback(window,key_callback);
glfwSwapInterval(1);
glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
glRotated(20,0.4,0.2,0.1);

//avisar que houve erro
glfwSetErrorCallback(error_callback);

x[0]= 0;
y[0]= 0;
z[0]= 0;

for(i=0;i<5;i++){
    for(j=0;j<5;j++){
        for(k=0;k<5;k++){
            cont = k + 5*j + 25*i;
            u = rand()/((double)RAND_MAX);
            x[cont] = a*k + (u - 0.5)*0.5;
            u = rand()/((double)RAND_MAX);
            y[cont] = a*j + (u - 0.5)*0.5;
            u = rand()/((double)RAND_MAX);
            z[cont] = a*i + (u - 0.5)*0.5;
        }
    }
}

while (!glfwWindowShouldClose(window)){
	     glClear(GL_COLOR_BUFFER_BIT);

    for(i=0;i<n;i++){

        fx[i]=0;
        fy[i]=0;
        fz[i]=0;
        fx1[i]=0;
        fy1[i]=0;
        fz1[i]=0;
        for(j=0;j<n;j++) if (j != i){
            R[j]=((x[i]-x[j])*(x[i]-x[j]) + (y[i]-y[j])*(y[i]-y[j]) + (z[i]-z[j])*(z[i]-z[j]));
            r6 = R[j]*R[j]*R[j];
            r12 = r6*r6;
            fx[j]+= 24*(2*(1/(r12)) - (1/r6))*(1/R[j])*(x[i]-x[j]);
            fy[j]+= 24*(2*(1/(r12)) - (1/r6))*(1/R[j])*(y[i]-y[j]);
            fz[j]+= 24*(2*(1/(r12)) - (1/r6))*(1/R[j])*(z[i]-z[j]);
        }
    }

    for(j=0;j<n;j++){
        x1[j]= x[j] + vx[j]*dt + fx[j]*dt*dt/2;
        y1[j]= y[j] + vy[j]*dt + fy[j]*dt*dt/2;
        z1[j]= z[j] + vz[j]*dt + fz[j]*dt*dt/2;
    }
    
     for(j=0;j<n;j++)if (j != i){
        R[j]=((x1[i]-x1[j])*(x1[i]-x1[j]) + (y1[i]-y1[j])*(y1[i]-y1[j]) + (z1[i]-z1[j])*(z1[i]-z1[j]));
        r6 = R[j]*R[j]*R[j];
        r12 = r6*r6;
        fx1[j]+= 24*(2*(1/(r12)) - (1/r6))*(1/R[j])*(x1[i]-x1[j]);
        fy1[j]+= 24*(2*(1/(r12)) - (1/r6))*(1/R[j])*(y1[i]-y1[j]);
        fz1[j]+= 24*(2*(1/(r12)) - (1/r6))*(1/R[j])*(z1[i]-z1[j]);
    }
  

    for(j=0;j<n;j++){
        vx[j]= vx[j] + (fx[j]+fx1[j])*dt/2;
        vy[j]= vy[j] + (fy[j]+fy1[j])*dt/2;
        vz[j]= vz[j] + (fz[j]+fz1[j])*dt/2;
        x[j]= x[j] + vx[j]*dt + fx1[j]*dt*dt/2;
        y[j]= y[j] + vy[j]*dt + fy1[j]*dt*dt/2;
        z[j]= z[j] + vz[j]*dt + fz1[j]*dt*dt/2;

       if(x[j]<2.5){
          x[j] = x[j] + 5;
        }
        if(x[j]>2.5){
          x[j] = x[j] - 5;
        }
        if(y[j]<2.5){
          y[j] = y[j] + 5;
        }
        if(y[j]>2.5){
          y[j] = y[j] - 5;
        }
        if(z[j]<2.5){
          z[j] = z[j] + 5;
        }
        if(z[j]>2.5){
          z[j] = z[j] - 5;
        }

        }

         glBegin(GL_POINTS);
		 glColor3f(1,1,1);
         for(j=0; j<n; j++){
		 glVertex3f(x[j]/10,y[j]/10,z[j]/10);
		 }
		 glEnd();
		 glfwSwapBuffers(window);
		 glfwPollEvents();
}
glfwDestroyWindow(window);
glfwTerminate();
return 0;
}

